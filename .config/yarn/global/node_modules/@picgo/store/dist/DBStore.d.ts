import { ZlibAdapter } from './adapters/ZlibAdapter';
import { IObject, IResult, IGetResult, IFilter, ILowData } from './types';
declare class DBStore {
    private readonly db;
    private readonly collectionName;
    private readonly collectionKey;
    private hasRead;
    errorList: Array<Error | string>;
    private readonly adapter;
    constructor(dbPath: string, collectionName: string);
    getAdapter(): ZlibAdapter;
    read(flush?: boolean): Promise<ILowData | null>;
    get(filter?: IFilter): Promise<IGetResult<IObject>>;
    private getCollection;
    private getCollectionKey;
    private getCollectionKeyMap;
    private setCollectionKey;
    insert<T>(value: T, writable?: boolean): Promise<IResult<T>>;
    insertMany<T>(value: T[]): Promise<Array<IResult<T>>>;
    updateById(id: string, value: IObject): Promise<boolean>;
    updateMany(list: IObject[]): Promise<{
        total: number;
        success: number;
    }>;
    getById<T>(id: string): Promise<IResult<T> | undefined>;
    removeById(id: string): Promise<void>;
    overwrite<T>(value: T[]): Promise<Array<IResult<T>>>;
}
export { DBStore };
