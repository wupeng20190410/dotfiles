"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSyncAdapter = void 0;
const tslib_1 = require("tslib");
const fs = (0, tslib_1.__importStar)(require("fs"));
const path = (0, tslib_1.__importStar)(require("path"));
const base_1 = require("./base");
const utils_1 = require("../utils");
const types_1 = require("../types");
class FileSyncAdapter extends base_1.BaseAdapter {
    constructor(options) {
        super();
        this.locales = {};
        this.localeFileName = {};
        const { localesBaseDir, localeFileName } = options;
        this.localesBaseDir = localesBaseDir;
        if (localeFileName != null) {
            this.localeFileName = localeFileName;
        }
        else {
            this.guessLocaleFileName(localesBaseDir);
        }
        // only for dev env
        if (process.env.NODE_ENV === types_1.ERUN_ENV.dev) {
            this.watch(this.localesBaseDir);
        }
    }
    getLocale(language) {
        if (!this.locales[language]) {
            this.loadLocale(language);
        }
        return this.locales[language];
    }
    loadLocale(language) {
        if (!this.localeFileName[language]) {
            utils_1.logger.error(`can 't locate the locale file of language ${language}`);
            return;
        }
        const filePath = path.join(this.localesBaseDir, this.localeFileName[language]);
        const fileContent = fs.readFileSync(filePath, {
            encoding: 'utf-8'
        });
        try {
            const locale = JSON.parse(fileContent);
            this.locales[language] = locale;
        }
        catch (err) {
            utils_1.logger.error(`unable to parse locales from file (maybe ${filePath} is empty or invalid json?)`);
            utils_1.logger.error(`raw error info: ${err}`);
        }
    }
    guessLocaleFileName(dir) {
        const files = fs.readdirSync(dir);
        const localeFileName = {};
        files.forEach((fileName) => {
            const localeName = fileName.replace(path.extname(fileName), '');
            localeFileName[localeName] = fileName;
        });
        utils_1.logger.log(`guess locale file path from ${dir}`);
        utils_1.logger.log(`localeFileName: ${JSON.stringify(localeFileName)}`);
        this.localeFileName = localeFileName;
    }
    // watch the change of files under `dir`
    watch(dir) {
        fs.watch(dir, (eventType, fileName) => {
            let language = '';
            const { localeFileName } = this;
            for (const lan in localeFileName) {
                if (localeFileName.hasOwnProperty(lan)) {
                    if (localeFileName[lan] === fileName) {
                        language = lan;
                    }
                }
            }
            if (language && eventType === types_1.EFileChangeType.change) {
                this.loadLocale(language); // update locale
                utils_1.logger.log(`${fileName} has updated`);
            }
        });
    }
}
exports.FileSyncAdapter = FileSyncAdapter;
